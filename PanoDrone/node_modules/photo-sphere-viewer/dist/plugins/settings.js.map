{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/SettingsButton.js","../../src/plugins/settings/index.js"],"sourcesContent":["import { AbstractButton, CONSTANTS } from 'photo-sphere-viewer';\nimport SettingsPlugin from './index';\nimport icon from './settings.svg';\n\n/**\n * @summary Navigation bar settings button class\n * @extends PSV.buttons.AbstractButton\n * @memberof PSV.buttons\n */\nexport class SettingsButton extends AbstractButton {\n\n  static id = 'settings';\n  static icon = icon;\n\n  /**\n   * @param {PSV.components.Navbar} navbar\n   */\n  constructor(navbar) {\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = this.psv.getPlugin(SettingsPlugin.id);\n\n    if (this.plugin) {\n      this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\n      this.psv.on(CONSTANTS.EVENTS.CLOSE_PANEL, this);\n    }\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\n    this.psv.off(CONSTANTS.EVENTS.CLOSE_PANEL, this);\n\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @override\n   */\n  isSupported() {\n    return !!this.plugin;\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      // @formatter:off\n      case CONSTANTS.EVENTS.OPEN_PANEL:  this.toggleActive(e.args[0] === SettingsPlugin.ID_PANEL); break;\n      case CONSTANTS.EVENTS.CLOSE_PANEL: this.toggleActive(false); break;\n      // @formatter:on\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @override\n   * @description Toggles settings\n   */\n  onClick() {\n    this.plugin.toggleSettings();\n  }\n\n}\n","import { AbstractPlugin, DEFAULTS, PSVError, registerButton, utils } from 'photo-sphere-viewer';\nimport check from './check.svg';\nimport chevron from './chevron.svg';\nimport icon from './settings.svg';\nimport { SettingsButton } from './SettingsButton';\nimport './style.scss';\nimport switchOff from './switch-off.svg';\nimport switchOn from './switch-on.svg';\n\n\n// add settings button\nDEFAULTS.navbar.splice(DEFAULTS.navbar.indexOf('fullscreen'), 0, SettingsButton.id);\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\nregisterButton(SettingsButton);\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\n * @summary Description of a setting\n * @property {string} id - identifier of the setting\n * @property {string} label - label of the setting\n * @property {'options' | 'toggle'} type - type of the setting\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\n * @summary Description of a 'options' setting\n * @property {'options'} type - type of the setting\n * @property {function} current - function which returns the current option id\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\n * @property {function} apply - function called with the id of the selected option\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\n * @summary Description of a 'toggle' setting\n * @property {'toggle'} type - type of the setting\n * @property {function} active - function which return whereas the setting is active or not\n * @property {function} toggle - function called when the setting is toggled\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\n * @summary Option of an 'option' setting\n * @property {string} id - identifier of the option\n * @property {string} label - label of the option\n */\n\n/**\n * @summary Adds a button to access various settings.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport default class SettingsPlugin extends AbstractPlugin {\n\n  static id = 'settings';\n\n  /**\n   * @summary Panel identifier for settings content\n   * @type {string}\n   * @constant\n   */\n  static ID_PANEL = 'settings';\n\n  /**\n   * @summary Property name added to settings items\n   * @type {string}\n   * @constant\n   */\n  static SETTING_DATA = 'settingId';\n\n  /**\n   * @summary Settings list template\n   * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\n   * @param {string} title\n   * @param {string} dataKey\n   * @param {function} optionsCurrent\n   * @returns {string}\n   */\n  static SETTINGS_TEMPLATE = (settings, title, dataKey, optionsCurrent) => `\n<div class=\"psv-panel-menu\">\n  <h1 class=\"psv-panel-menu-title\">${icon} ${title}</h1>\n  <ul class=\"psv-panel-menu-list\">\n    ${settings.map(s => `\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\n        ${SettingsPlugin.SETTINGS_TEMPLATE_[s.type](s, optionsCurrent)}\n      </li>\n    `).join('')}\n  </ul>\n</div>\n`;\n\n  /**\n   * @summary Setting item template, by type\n   */\n  static SETTINGS_TEMPLATE_ = {\n    options: (setting, optionsCurrent) => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span> \n      <span class=\"psv-settings-item-value\">${optionsCurrent(setting)}</span> \n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n    `,\n    toggle : setting => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\n    `,\n  };\n\n  /**\n   * @summary Settings options template\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @param {string} title\n   * @param {string} dataKey\n   * @param {function} optionActive\n   * @returns {string}\n   */\n  static SETTING_OPTIONS_TEMPLATE = (setting, title, dataKey, optionActive) => `\n<div class=\"psv-panel-menu\">\n  <h1 class=\"psv-panel-menu-title\">${icon} ${title}</h1>\n  <ul class=\"psv-panel-menu-list\">\n    <li class=\"psv-panel-menu-item psv-settings-item--header\" data-${dataKey}=\"__back\">\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n    </li>\n    ${setting.options().map(s => `\n      <li class=\"psv-panel-menu-item\" data-${dataKey}=\"${s.id}\">\n        <span class=\"psv-settings-item-icon\">${optionActive(s) ? check : ''}</span>\n        <span class=\"psv-settings-item-value\">${s.label}</span>\n      </li>\n    `).join('')}\n  </ul>\n`;\n\n  /**\n   * @param {PSV.Viewer} psv\n   */\n  constructor(psv) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\n     * @private\n     */\n    this.settings = [];\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    super.destroy();\n  }\n\n  /**\n   * @summary Registers a new setting\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\n   */\n  addSetting(setting) {\n    if (!setting.id) {\n      throw new PSVError('Missing setting id');\n    }\n    if (!setting.type) {\n      throw new PSVError('Missing setting type');\n    }\n    if (!SettingsPlugin.SETTINGS_TEMPLATE_[setting.type]) {\n      throw new PSVError('Unsupported setting type');\n    }\n\n    this.settings.push(setting);\n\n    if (this.psv.panel.prop.contentId === SettingsPlugin.ID_PANEL) {\n      this.showSettings();\n    }\n  }\n\n  /**\n   * @summary Removes a setting\n   * @param {string} id\n   */\n  removeSetting(id) {\n    let idx = -1;\n    // FIXME use findIndex, one day, when IE11 is totally dead\n    this.settings.some((setting, i) => {\n      if (setting.id === id) {\n        idx = i;\n        return true;\n      }\n      return false;\n    });\n    if (idx !== -1) {\n      this.settings.splice(idx, 1);\n\n      if (this.psv.panel.prop.contentId === SettingsPlugin.ID_PANEL) {\n        this.showSettings();\n      }\n    }\n  }\n\n  /**\n   * @summary Toggles the settings panel\n   */\n  toggleSettings() {\n    if (this.psv.panel.prop.contentId === SettingsPlugin.ID_PANEL) {\n      this.hideSettings();\n    }\n    else {\n      this.showSettings();\n    }\n  }\n\n  /**\n   * @summary Hides the settings panel\n   */\n  hideSettings() {\n    this.psv.panel.hide(SettingsPlugin.ID_PANEL);\n  }\n\n  /**\n   * @summary Shows the settings panel\n   */\n  showSettings() {\n    this.psv.panel.show({\n      id          : SettingsPlugin.ID_PANEL,\n      content     : SettingsPlugin.SETTINGS_TEMPLATE(\n        this.settings,\n        this.psv.config.lang[SettingsButton.id],\n        utils.dasherize(SettingsPlugin.SETTING_DATA),\n        (setting) => { // retrocompatibility with \"current\" returning a label\n          const current = setting.current();\n          const option = setting.options().find(opt => opt.id === current);\n          return option?.label || current;\n        }\n      ),\n      noMargin    : true,\n      clickHandler: (e) => {\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\n        const settingId = li ? li.dataset[SettingsPlugin.SETTING_DATA] : undefined;\n        const setting = this.settings.find(s => s.id === settingId);\n\n        if (setting) {\n          switch (setting.type) {\n            case 'toggle':\n              setting.toggle();\n              this.showSettings();\n              break;\n\n            case 'options':\n              this.__showOptions(setting);\n              break;\n\n            default:\n            // noop\n          }\n        }\n      },\n    });\n  }\n\n  /**\n   * @summary Shows setting options panel\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @private\n   */\n  __showOptions(setting) {\n    const current = setting.current();\n\n    this.psv.panel.show({\n      id          : SettingsPlugin.ID_PANEL,\n      content     : SettingsPlugin.SETTING_OPTIONS_TEMPLATE(\n        setting,\n        this.psv.config.lang[SettingsButton.id],\n        utils.dasherize(SettingsPlugin.SETTING_DATA),\n        (option) => { // retrocompatibility with options having an \"active\" flag\n          return 'active' in option ? option.active : option.id === current;\n        }\n      ),\n      noMargin    : true,\n      clickHandler: (e) => {\n        const li = e.target ? utils.getClosest(e.target, 'li') : undefined;\n        const optionId = li ? li.dataset[SettingsPlugin.SETTING_DATA] : undefined;\n\n        if (optionId === '__back') {\n          this.showSettings();\n        }\n        else {\n          setting.apply(optionId);\n          this.hideSettings();\n        }\n      },\n    });\n  }\n\n}\n"],"names":["SettingsButton","navbar","plugin","psv","getPlugin","SettingsPlugin","id","on","CONSTANTS","EVENTS","OPEN_PANEL","CLOSE_PANEL","destroy","off","isSupported","handleEvent","e","type","toggleActive","args","ID_PANEL","onClick","toggleSettings","AbstractButton","icon","DEFAULTS","splice","indexOf","lang","registerButton","settings","addSetting","setting","PSVError","SETTINGS_TEMPLATE_","push","panel","prop","contentId","showSettings","removeSetting","idx","some","i","hideSettings","hide","show","content","SETTINGS_TEMPLATE","config","utils","dasherize","SETTING_DATA","current","option","options","find","opt","label","noMargin","clickHandler","li","target","getClosest","undefined","settingId","dataset","s","toggle","__showOptions","SETTING_OPTIONS_TEMPLATE","active","optionId","apply","AbstractPlugin","title","dataKey","optionsCurrent","map","join","chevron","switchOn","switchOff","optionActive","check"],"mappings":"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"}